"use client"
import { useParams } from "next/navigation";
import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, Download, UserCircle, Menu, Copy, ChevronDown, ChevronUp } from "lucide-react"
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet"
import { prepareInitialPrompt, prepareSummaryPrompt } from "@/utils/preparePrompt";
import { buildMessagesForOpenAI, buildFollowUpQuestionsPrompt } from "@/utils/buildMessagesForOpenAI";
import { SimulationMessage } from "@/utils/types";
import { ChatCompletionMessageParam } from "openai/resources/index.mjs";
import { useRouter } from "next/navigation";
import { useToast } from "@/hooks/use-toast";
import Link from "next/link";
import { Persona,Simulation } from "@/utils/types";
import { logErrorNonBlocking } from "@/utils/errorLogger";
import { MediaViewer } from "@/components/media-viewer";
import { MediaSlideshow } from "@/components/media-slideshow";
import { CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { CREDIT_RATES } from '@/utils/openai'
import { getSignedUrlForDisplay, getSignedUrlsForDisplay } from '@/utils/fileUpload'
import { getSignedUrlsForProjectMedia } from '@/utils/projectMedia'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { ModelSelectorWithCredits } from '@/components/ModelSelectorWithCredits';
import { useCredits } from "@/hooks/useCredits"; // adjust path as needed
import { runSimulationAPI } from '@/utils/api';

// Interface for the Simulation data


// Interface for the API response
interface SimulationResponse {
  simulation: Simulation;
  personas: Persona[];
  error?: string;
}

// Interface for formatted message for display
interface FormattedMessage {
  speaker: string;
  text: string;
  time: string;
  sender_id?: string | null;
  sender_type?: string;
}

export default function SimulationViewPage() {
  const params = useParams(); // Use useParams() to get the business_id
  const simulationId = params.id as string;
  const router = useRouter();
  const { toast } = useToast();

  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [showErrorPopup, setShowErrorPopup] = useState(false)
  const [errorMessage, setErrorMessage] = useState("")
  const [isSimulationRunning, setIsSimulationRunning] = useState(false)
  const [simulationData, setSimulationData] = useState<SimulationResponse | null>(null)
  const [messages, setMessages] = useState<Array<{name: string, message: string}>>([])
  const [simulationMessages, setSimulationMessages] = useState<SimulationMessage[]>([])
  const [formattedMessages, setFormattedMessages] = useState<FormattedMessage[]>([])
  const [isLoadingMessages, setIsLoadingMessages] = useState(false)
  const [newMessage, setNewMessage] = useState("")
  const [isEndingDiscussion, setIsEndingDiscussion] = useState(false)
  const [isStartingDiscussion, setIsStartingDiscussion] = useState(false)
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [modelInUse, setModelInUse] = useState<string>('gpt-4o-mini')
  const [showInstructionBox, setShowInstructionBox] = useState(false)
  const [userInstruction, setUserInstruction] = useState("")
  const [showFollowUpQuestions, setShowFollowUpQuestions] = useState(false)
  const [isLoadingFollowUpQuestions, setIsLoadingFollowUpQuestions] = useState(false)
  const [followUpQuestions, setFollowUpQuestions] = useState<{question: string}[]>([])
  const [isParticipantsCollapsed, setIsParticipantsCollapsed] = useState(false)
  const [isDiscussionQuestionsCollapsed, setIsDiscussionQuestionsCollapsed] = useState(false)
  const [selectedStimulusIndex, setSelectedStimulusIndex] = useState<number | null>(null)
  const [attachedImages, setAttachedImages] = useState<{url: string, name: string}[]>([])
  const [signedStimulusUrls, setSignedStimulusUrls] = useState<string[]>([])
  const [isLoadingSignedUrls, setIsLoadingSignedUrls] = useState(false)
  const [selectedStimulusImages, setSelectedStimulusImages] = useState<boolean[]>([])
  const [askedQuestionIndices, setAskedQuestionIndices] = useState<number[]>([])
  const [projectMediaUrls, setProjectMediaUrls] = useState<string[]>([])
  const [signedProjectMediaUrls, setSignedProjectMediaUrls] = useState<string[]>([])
  const [selectedProjectMediaImages, setSelectedProjectMediaImages] = useState<boolean[]>([])
  const [isLoadingProjectMedia, setIsLoadingProjectMedia] = useState(false)
  const [ragDocuments, setRagDocuments] = useState<any[]>([])
  const [selectedRagDocuments, setSelectedRagDocuments] = useState<boolean[]>([])
  const [isLoadingRagDocuments, setIsLoadingRagDocuments] = useState(false)
  // const { availableCredits, setAvailableCredits, fetchUserCredits } = useCredits();

  // Color palette for personas (10 colors)
  const personaColors = [
    '#E91E63', // Pink
    '#673AB7', // Deep Purple
    '#3F51B5', // Indigo
    '#2196F3', // Blue
    '#00BCD4', // Cyan
    '#009688', // Teal
    '#4CAF50', // Green
    '#FF9800', // Orange
    '#F44336', // Red
    '#795548', // Brown
  ];

  // Function to get color for a persona
  const getPersonaColor = (personaId: string, personas: Persona[]) => {
    const index = personas.findIndex(p => p.id === personaId);
    return index !== -1 ? personaColors[index % personaColors.length] : personaColors[0];
  };

  // Check if fallback search is being used
const debugFallbackSearch = async () => {
  const projectId = simulationData?.simulation?.project_id;
  
  const embeddingResponse = await fetch(`/api/projects/${projectId}/rag/query-embedding`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: "Alex Hormozi" })
  });
  
  const { embedding } = await embeddingResponse.json();
  
  const searchResponse = await fetch(`/api/projects/${projectId}/rag/search`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: "Alex Hormozi",
      queryEmbedding: embedding,
      limit: 5,
      threshold: 0.1
    })
  });
  
  const results = await searchResponse.json();
  console.log("Search method used:", results.searchMethod);
  console.log("Total results:", results.totalResults);
  console.log("Results array:", results.results);
};

// Test with the exact same embedding that worked in SQL
const testExactAPICall = async () => {
  const projectId = simulationData?.simulation?.project_id;
  const embedding = [-0.0037386000622063875,-0.008453072048723698,-0.00408520270138979,-0.020136617124080658,-0.0010936498874798417,0.03639666736125946,-0.021011536940932274,-0.006703232415020466,0.0003770988842006773,-0.008668436668813229,0.030877942219376564,0.002880505518987775,0.004199615679681301,-0.0075108506716787815,-0.005629773251712322,-0.003333108266815543,0.03693507984280586,0.005909074563533068,0.004946662578731775,-0.01440252736210823,-0.011474911123514175,-0.013783353380858898,-0.023595916107296944,-0.0012114275014027953,0.001948379329405725,0.004677456337958574,0.024551598355174065,-0.027997436001896858,0.023932423442602158,-0.025197692215442657,0.015573574230074883,0.006121074315160513,-0.017431097105145454,-0.008816500194370747,-0.013413194566965103,0.0016135541955009103,0.01210081484168768,-0.004859170410782099,0.02521115355193615,-0.007423358969390392,0.013184369541704655,-0.008446342311799526,0.00891072303056717,-0.004579869098961353,-0.02220950461924076,0.0029208865016698837,-0.011293197050690651,-0.02268061600625515,-0.026705246418714523,0.022169124335050583,0.024659281596541405,0.01604468561708927,-0.012302719987928867,-0.011804688721895218,0.0010566340060904622,-0.008318468928337097,-0.007800247520208359,0.018050270155072212,0.005700439680367708,0.0022680615074932575,0.002000537933781743,-0.0050105988048017025,-0.017067668959498405,0.011858529411256313,0.0029343466740101576,0.005464884452521801,-0.026624485850334167,0.017606079578399658,-0.004135678987950087,0.010909577831625938,0.031200990080833435,0.013271861709654331,-0.020971156656742096,-0.02515731193125248,0.03645050898194313,-0.0105259595438838,-0.022397948428988457,0.011952752247452736,-0.0012854592641815543,0.008729008957743645,0.022276805713772774,-0.0127872908487916,-0.008163675665855408,0.0011828243732452393,0.024861184880137444,0.01740417629480362,-0.0047952341847121716,0.01735033467411995,0.006972438655793667,-0.027674390003085136,0.010512499138712883,0.006359994411468506,0.02374397963285446,-0.005118281580507755,-0.014079480431973934,0.0033936796244233847,-0.03095870465040207,0.00957027729600668,-0.006659486331045628,-0.024511218070983887,0.003580441465601325,-0.01276710070669651,-0.021321125328540802,-0.004431805573403835,-0.014994780533015728,-0.01136722881346941,0.007033010013401508,0.007921390235424042,0.01655617728829384,-0.0006953089614398777,-0.0018827603198587894,0.011905640363693237,0.0015899986028671265,-0.04859170317649841,-0.024780424311757088,-0.008903992362320423,0.012955544516444206,-0.004542853217571974,-0.020984617993235588,-0.025022709742188454,-0.004065012559294701,0.03249317780137062,0.0046707261353731155,-0.012625766918063164,0.013372814282774925,-0.017431097105145454,-0.028724292293190956,-0.005639868322759867,-0.001184506923891604,-0.005872058682143688,0.028185881674289703,-0.008055993355810642,0.011939291842281818,-0.007820437662303448,-0.014146781526505947,0.06191740930080414,-0.038119588047266006,0.005094725638628006,-0.010849006474018097,-0.021792234852910042,0.012073894962668419,0.024228550493717194,-0.003980885725468397,0.0024161250330507755,-0.016919605433940887,0.002552410587668419,0.020123157650232315,-0.004603424575179815,-0.0005443011177703738,0.03588517755270004,0.02168455347418785,-0.014644812792539597,0.011959481984376907,0.023972805589437485,0.004327488597482443,0.006740248296409845,-0.0025372677482664585,0.011757577769458294,-0.02235756814479828,-0.008708817884325981,-0.00013628559827338904,0.004532758146524429,0.014806336723268032,-0.015371669083833694,-0.00403472688049078,0.024726582691073418,0.013917956501245499,-0.011959481984376907,-0.0019971728324890137,-0.005734090227633715,0.003432377940043807,0.01215465646237135,-0.03666587546467781,0.012686338275671005,-0.014039099216461182,0.038738761097192764,0.010573070496320724,-0.004065012559294701,-0.019073253497481346,-0.012982465326786041,-0.009886594489216805,0.0026281247846782207,0.03529292345046997,0.010270213708281517,0.017363794147968292,0.022397948428988457,0.019611665979027748,-0.031254831701517105,-0.011219165287911892,0.005495170131325722,-0.003974155522882938,0.042373042553663254,-0.002205807715654373,-0.006491232663393021,-0.6749535799026489,-0.027243658900260925,-0.002259648870676756,0.024672741070389748,0.018925189971923828,0.015438971109688282,-0.014725575223565102,0.00827808864414692,-0.005592757370322943,0.007564691826701164,-0.022384488955140114,0.025547660887241364,-0.0017380620120093226,-0.023178646340966225,0.019907793030142784,-0.01782144606113434,-0.003822726896032691,-0.01819833368062973,-0.00247837882488966,0.03330079838633537,0.010754784569144249,-0.011804688721895218,-0.00034891636460088193,-0.024174708873033524,0.035158321261405945,-0.016071604564785957,-0.006672946736216545,-0.033731527626514435,-0.003168219467625022,0.02452467754483223,-0.004216440953314304,0.04377291724085808,-0.0018423793371766806,-0.0024211725685745478,0.05524109676480293,-0.018157953396439552,0.003506409702822566,0.04869938641786575,-0.008035802282392979,0.029074260964989662,-0.018925189971923828,-0.019288618117570877,0.017902206629514694,-0.006521518342196941,-0.010431737639009953,0.023178646340966225,0.014644812792539597,0.0006704914849251509,0.0047447578981518745,-0.007827168330550194,0.008661706931889057,-0.019759729504585266,-0.002448093146085739,0.008049262687563896,0.0054009477607905865,0.014442908577620983,0.004266917239874601,-0.023070964962244034,-0.005979740992188454,-0.011878720484673977,-0.017996428534388542,0.002276474377140403,-0.020271221175789833,-0.009859674610197544,0.015142844058573246,0.0057677412405610085,-0.001684220740571618,0.002500251866877079,0.0007361104944720864,-0.02521115355193615,-0.01376989297568798,0.014214083552360535,-0.02284213900566101,-0.012430592440068722,0.007618533447384834,0.029370388016104698,0.008964563719928265,-0.013736242428421974,-0.014658273197710514,-0.007066660560667515,0.009617388248443604,0.02294982224702835,-0.0009506341302767396,-0.010061578825116158,0.03303159028291702,-0.01187198981642723,-0.02848200686275959,0.010640371590852737,-0.007874279282987118,-0.018131032586097717,0.029020419344305992,0.0365043506026268,0.014590972103178501,0.0056432331912219524,0.0007785945781506598,0.006121074315160513,-0.019032873213291168,0.02300366386771202,0.014604432508349419,-0.017498398199677467,0.0014974590158089995,-0.022249886766076088,0.02947806939482689,0.008883802220225334,-0.0032607591710984707,-0.009994277730584145,-0.019638586789369583,0.02853584848344326,0.04215767979621887,-0.025763025507330894,0.0048154243268072605,-0.004536123014986515,-0.0197866503149271,0.0021704742684960365,-0.008210786618292332,-0.03206244856119156,0.01656963676214218,0.013016115874052048,0.00334993377327919,-0.04051551967859268,0.03381228819489479,-0.017538778483867645,0.011697006411850452,-0.0030083784367889166,0.023501694202423096,0.01914055459201336,-0.003109330777078867,-0.024538138881325722,-0.013103608042001724,0.017579160630702972,0.011373958550393581,-0.010593260638415813,-0.0048928214237093925,-0.02605915255844593,0.0010011103004217148,-0.0032102828845381737,0.007308945991098881,-0.009361643344163895,0.012719988822937012,0.013298782519996166,-0.022707536816596985,-0.016906144097447395,-0.0005190630326978862,0.021846076473593712,-0.013736242428421974,-0.03612746298313141,-0.00827808864414692,0.014806336723268032,-0.01984049193561077,-0.016744621098041534,0.012592116370797157,0.002966315019875765,-0.03278930485248566,0.03400073200464249,0.0013889353722333908,-0.014308305457234383,0.014644812792539597,0.0011735704028978944,-0.010075039230287075,0.002533902646973729,0.02072887122631073,0.022505631670355797,0.0011710466351360083,0.0011079513933509588,0.008715548552572727,0.008345389738678932,0.0030100608710199594,0.003977520391345024,0.0052562495693564415,-0.009247230365872383,0.007302216254174709,-0.0015849510673433542,-0.040488600730895996,-0.01582931913435459,0.011098022572696209,0.011555672623217106,0.0010414911666885018,0.013197829946875572,0.013615099713206291,0.005384122487157583,0.006568629294633865,0.0078069777227938175,-0.041538503021001816,-0.013258401304483414,0.022815218195319176,0.005313456058502197,0.0014385702088475227,0.029558831825852394,-0.019544364884495735,0.009354912675917149,-0.01355452835559845,0.009563547559082508,0.012181577272713184,-0.002868727780878544,-0.00870208814740181,0.004246726632118225,0.02130766399204731,0.01761954091489315,0.00991351529955864,0.005602852441370487,0.032520100474357605,0.021711474284529686,0.0004736345144920051,0.007605073042213917,0.022169124335050583,0.005357201676815748,0.002121680648997426,-0.013325703330338001,0.005027424544095993,0.00722818449139595,-0.016367731615900993,-0.041861552745103836,-0.014981321059167385,0.016165828332304955,0.0056196777150034904,0.007961771450936794,0.0049634878523647785,0.03400073200464249,-0.006366724614053965,-0.012888243421912193,0.007551231887191534,-0.01476595550775528,-0.001589157385751605,-0.020217379555106163,0.0048154243268072605,-0.0014183797175064683,0.020351983606815338,-0.0025625056587159634,0.020486585795879364,-0.008601135574281216,-0.009233769960701466,0.024080486968159676,-0.016542715951800346,0.011212434619665146,0.025668803602457047,-0.017794525250792503,0.00716088293120265,-0.017108049243688583,0.02152302861213684,0.005848503205925226,-0.0013737925328314304,0.012094085104763508,0.024928485974669456,0.00946932565420866,0.019692428410053253,-0.011851799674332142,0.05281824246048927,-0.008372310549020767,0.0026281247846782207,0.0006242216913960874,-0.02490156702697277,-0.008257897570729256,0.019167475402355194,0.0023471408057957888,0.025345755741000175,-0.016892684623599052,-0.0012206814717501402,0.011353768408298492,0.012040243484079838,0.03012416511774063,-0.010095229372382164,0.030420292168855667,0.0010431737173348665,0.014927479438483715,-0.015438971109688282,-0.011347037740051746,0.018844429403543472,-0.007234914693981409,-0.022667154669761658,0.009684690274298191,-0.014389066956937313,0.00491974176838994,0.01735033467411995,-0.0054043130949139595,0.004603424575179815,0.012329640798270702,-0.025776486843824387,-0.021509569138288498,0.014860178343951702,-0.0024396805092692375,-0.0075108506716787815,-0.04431132599711418,0.021401885896921158,0.014160241931676865,-0.0012947132345288992,-0.0296395942568779,-0.011071101762354374,0.005003868602216244,-0.006420565769076347,0.020284680649638176,0.007113771978765726,-0.0015782208647578955,-0.008143485523760319,0.0036174573469907045,-0.0021872997749596834,0.013736242428421974,0.013204560615122318,-0.014671733602881432,0.01136722881346941,-0.020230840891599655,0.0005312614375725389,0.006736882962286472,0.010485578328371048,-0.01772722229361534,0.04094625264406204,0.005488439928740263,-0.03386612981557846,-0.03200860694050789,-0.029720356687903404,-0.020028935745358467,-0.0003186306857969612,-0.013931416906416416,-0.012067164294421673,0.010559610091149807,0.004246726632118225,-0.01341992523521185,-0.02494194731116295,-0.01353433821350336,0.00256418832577765,-0.015102463774383068,-0.021442268043756485,0.000008879333108779974,-0.018898269161581993,-0.012814211659133434,0.0881919264793396,0.027862833812832832,0.0014688558876514435,0.028993498533964157,-0.0012375068617984653,0.019221317023038864,-0.02009623683989048,-0.020325062796473503,0.01792912743985653,-0.014617891982197762,0.004886091221123934,0.006878216285258532,0.008177136071026325,0.0007529358845204115,0.008883802220225334,-0.016798462718725204,0.006380185019224882,-0.0057441857643425465,-0.01300265546888113,0.0055961222387850285,-0.01334589347243309,-0.007766596507281065,-0.0007306422339752316,0.02015007846057415,-0.0032035529147833586,-0.027782071381807327,0.004933202173560858,0.028831975534558296,-0.008984753862023354,-0.01962512545287609,0.00013786298222839832,-0.0016943160444498062,0.019692428410053253,-0.0016522526275366545,0.0002826664422173053,0.01223541796207428,0.0038260919973254204,0.0117912283167243,0.006410470698028803,-0.027351342141628265,0.017161890864372253,0.019800109788775444,-0.001141602173447609,-0.009179928340017796,0.00129891955293715,-0.012686338275671005,-0.018238713964819908,0.03962714225053787,-0.002959584817290306,0.0036948539782315493,-0.007524311076849699,0.014550590887665749,-0.01102399080991745,-0.018911730498075485,0.006770533975213766,0.0192482378333807,-0.0155870346352458,-0.0002919203834608197,-0.004135678987950087,0.012484434060752392,0.0004812059341929853,-0.021078839898109436,0.013271861709654331,-0.01718881167471409,-0.011340308003127575,-0.039331015199422836,-0.003005013335496187,0.017108049243688583,-0.040057871490716934,-0.030447212979197502,0.020002014935016632,-0.0008580944850109518,-0.02631489746272564,0.008890531957149506,0.014146781526505947,0.023501694202423096,0.0017279668245464563,-0.0314432755112648,0.0016446810914203525,0.028239721432328224,-0.00022903551871422678,-0.01708112843334675,-0.01570817641913891,-0.004603424575179815,0.0023959344252943993,-0.018077190965414047,-0.008399231359362602,0.0037150445859879255,0.0013165861601009965,0.03645050898194313,0.004489012062549591,0.009348182938992977,0.015425510704517365,-0.010909577831625938,0.004650535527616739,-0.012356560677289963,0.025776486843824387,0.02062118984758854,-0.0102567533031106,0.0055725667625665665,-0.011474911123514175,-0.029289625585079193,-0.01940976083278656,0.00021242046204861253,-0.006723423022776842,0.002581013599410653,0.032573942095041275,0.006168185267597437,-0.023663217201828957,-0.009065516293048859,0.008796310052275658,-0.02517077326774597,0.00020064268028363585,-0.006259042304009199,0.010801895521581173,0.01570817641913891,0.006730153225362301,0.01883096806704998,-0.018548302352428436,-0.017807984724640846,-0.004875995684415102,-0.043745994567871094,0.00593263003975153,0.027970515191555023,0.012699798680841923,0.014698654413223267,0.0007150787860155106,-0.015115924179553986,0.008271357975900173,-0.006716692820191383,-0.002942759310826659,0.024497756734490395,-0.015654336661100388,-0.009826023131608963,-0.0052528842352330685,-0.010270213708281517,-0.00745027931407094,0.005199043080210686,0.008042532950639725,-0.0013064909726381302,-0.01740417629480362,0.009395293891429901,-0.0031867274083197117,-0.014025638811290264,-0.028939658775925636,-0.027445564046502113,-0.012040243484079838,-0.0026987914461642504,-0.016381192952394485,-0.00709358137100935,-0.01202678307890892,0.0032641242723912,-0.0023521885741502047,0.005915804300457239,-0.002029141178354621,-0.02821280062198639,0.012336370535194874,0.002404347062110901,0.025709183886647224,0.02425547130405903,0.012666148133575916,-0.014173702336847782,0.014415987767279148,0.025924550369381905,0.006114344112575054,-0.0011129990452900529,0.024067027494311333,0.008641516789793968,-0.03413533791899681,0.018346397206187248,0.02405356615781784,0.016838843002915382,0.003045394318178296,-0.002806473756209016,0.027230199426412582,0.023932423442602158,-0.0011836657067760825,-0.021455727517604828,0.012255609035491943,-0.01639465242624283,-0.00843961164355278,-0.012121005915105343,0.004626980051398277,-0.021321125328540802,-0.007214724086225033,-0.005845137871801853,0.0210519190877676,-0.00576101103797555,0.008560754358768463,-0.0018777126679196954,0.0029225689359009266,-0.004657265730202198,0.007497390266507864,-0.007282025646418333,0.001810411224141717,-0.024497756734490395,-0.00907224602997303,0.011084562167525291,0.00806945376098156,0.026557184755802155,-0.005219233687967062,0.0144563689827919,0.022384488955140114,-0.0030504418537020683,0.024120869114995003,0.013386274687945843,0.01982703059911728,-0.018655983731150627,0.016838843002915382,-0.012780560180544853,-0.006003296468406916,0.00408520270138979,0.026866771280765533,-0.02494194731116295,0.011461450718343258,0.012491163797676563,-0.01883096806704998,0.009428944438695908,-0.010142340324819088,0.003540060482919216,-0.007322406396269798,0.0013090147404000163,0.012592116370797157,0.005441328510642052,0.011966211721301079,0.030662577599287033,-0.0014688558876514435,-0.008587675169110298,0.054191190749406815,-0.000838324660435319,0.009233769960701466,-0.0008799675269983709,0.02500924840569496,0.0018272364977747202,-0.012006592936813831,0.004882725887000561,0.021428806707262993,0.002264696406200528,-0.024565057829022408,0.02425547130405903,0.013238211162388325,0.005737455561757088,-0.013904496096074581,-0.012639227323234081,0.0014722209889441729,0.023972805589437485,-0.0130564970895648,0.022747917100787163,-0.019611665979027748,-0.008042532950639725,-0.0029343466740101576,0.008096374571323395,-0.001748157199472189,-0.003243933664634824,0.0077800569124519825,-0.009119356982409954,0.0030672673601657152,-0.019853951409459114,0.006568629294633865,0.01687922328710556,-0.018750205636024475,0.009994277730584145,-0.005700439680367708,0.009193388745188713,0.019921252503991127,0.032412417232990265,-0.005912439431995153,-0.009253960102796555,-0.02369013801217079,0.018790587782859802,-0.013749702833592892,0.009920245967805386,0.007423358969390392,-0.019503982737660408,0.014779415912926197,-0.011340308003127575,-0.009233769960701466,-0.029155023396015167,0.0023101249244064093,-0.005296630319207907,0.023286329582333565,0.015546653419733047,0.013332433067262173,0.020392363891005516,-0.017552239820361137,0.007746406365185976,0.004105393309146166,0.00015752764011267573,0.0013552845921367407,-0.013702591881155968,0.001978664891794324,-0.017861826345324516,0.00664602592587471,-0.004923107102513313,0.013339163735508919,-0.01724265143275261,0.012141196057200432,0.01341992523521185,-0.01819833368062973,-0.0021772044710814953,0.009886594489216805,-0.0019248237367719412,-0.004849075339734554,0.014537130482494831,0.008621325716376305,-0.03147019445896149,0.02163071185350418,-0.020338522270321846,-0.020984617993235588,-0.01677154190838337,-0.007551231887191534,0.00031799974385648966,-0.006400375626981258,-0.0027576801367104053,-0.008594405837357044,-0.001032237196341157,-0.001558030373416841,-0.027082135900855064,-0.009785642847418785,0.02294982224702835,-0.010425006970763206,-0.005333646200597286,-0.011858529411256313,-0.009772182442247868,0.02378436177968979,0.008109834045171738,0.018480999395251274,0.012612306512892246,-0.009375102818012238,-0.017592620104551315,0.018238713964819908,0.03437762334942818,-0.002404347062110901,-0.038792602717876434,-0.02031160145998001,-0.014348686672747135,-0.01930207945406437,0.02230372652411461,-0.004805329255759716,-0.0021990775130689144,-0.014079480431973934,0.014712114818394184,0.018750205636024475,-0.014860178343951702,-0.018817508593201637,-0.009536626748740673,-0.00018686690600588918,-0.006467677187174559,-0.030716419219970703,-0.010822085663676262,-0.01877712644636631,-0.0028350770007818937,0.005565836559981108,-0.048134054988622665,-0.007813707925379276,0.01919439621269703,-0.02689369209110737,-0.004371234215795994,-0.02311134524643421,0.020769251510500908,0.0017313319258391857,0.01783490553498268,0.019598206505179405,0.0117912283167243,-0.00611770898103714,0.008695357479155064,0.0020913949701935053,-0.013393004424870014,0.009940436109900475,0.006497962865978479,-0.0024817439261823893,-0.029316546395421028,-0.028778133913874626,-0.006020121742039919,0.019423222169280052,-0.003886663354933262,-0.0054514240473508835,0.012228688225150108,-0.01181141845881939,0.006211931351572275,-0.018494460731744766,0.012511354871094227,-0.0011971259955316782,0.002466601086780429,0.009738531894981861,-0.0365043506026268,-0.009819293394684792,0.00020484902779571712,-0.001261062454432249,-0.009725071489810944,0.015748558565974236,-0.006168185267597437,-0.025332296267151833,0.006497962865978479,-0.003546790685504675,-0.011124943383038044,0.001976982457563281,-0.008156945928931236,0.020230840891599655,0.003799171419814229,-0.0018810777692124248,0.009947165846824646,-0.0027980611193925142,0.011380689218640327,-0.005384122487157583,0.008762659505009651,-0.02421509101986885,-0.017969507724046707,0.019234776496887207,-0.03295082971453667,0.003149711526930332,-0.031093306839466095,0.003277584444731474,-0.010317324660718441,0.015385129489004612,-0.0071945334784686565,-0.019813571125268936,0.012753640301525593,0.02157687023282051,0.023515155538916588,-0.02705521509051323,0.010700942948460579,-0.006137899588793516,0.0058148521929979324,0.004317393060773611,0.007477200124412775,0.005343741737306118,-0.010647102259099483,-0.030447212979197502,-0.018655983731150627,-0.014173702336847782,-0.029020419344305992,-0.002833394333720207,-0.008998214267194271,-0.011461450718343258,0.003735234960913658,0.23087117075920105,-0.014752495102584362,-0.024820804595947266,0.002914156299084425,0.004344313871115446,0.005750915966928005,0.02858969010412693,0.022182583808898926,-0.0013923003571107984,0.011851799674332142,-0.00018329151498619467,-0.025776486843824387,-0.006171550136059523,-0.005942725110799074,-0.0075848824344575405,-0.037688858807086945,-0.030339529737830162,-0.023865122348070145,-0.032250892370939255,-0.0169869065284729,0.004832250066101551,0.001603459008038044,0.0018087286734953523,-0.005855232942849398,0.019396301358938217,0.002195712411776185,-0.01139414869248867,-0.0044015198945999146,-0.0053269159980118275,0.014537130482494831,0.004704377148300409,-0.0031312035862356424,0.007914659567177296,-0.007618533447384834,-0.006898406893014908,-0.011959481984376907,-0.014725575223565102,0.01313052885234356,0.026718707755208015,0.009105897508561611,0.008823230862617493,0.007006089203059673,-0.004075107630342245,0.0027273944579064846,0.009711611084640026,-0.013837195001542568,0.0008791262516751885,-0.011905640363693237,-0.0053538368083536625,0.014012178406119347,-0.018265634775161743,-0.029047340154647827,0.008385770954191685,0.004741393029689789,0.008190596476197243,-0.00264999782666564,0.01883096806704998,-0.00273580732755363,-0.0030622195918112993,0.02251909300684929,0.008554024621844292,0.014348686672747135,-0.017484936863183975,0.0301780067384243,-0.013931416906416416,0.019234776496887207,-0.01687922328710556,-0.015385129489004612,0.0006864755996502936,0.012706529349088669,0.003913584165275097,-0.0075377714820206165,-0.014644812792539597,-0.011744117364287376,-0.022855600342154503,-0.02426893264055252,0.03755425289273262,0.007100311573594809,0.008177136071026325,0.007127231918275356,-0.0028939659241586924,0.012013323605060577,0.03335464000701904,0.013695861212909222,-0.0010692530777305365,-0.022882521152496338,0.025453438982367516,0.0034222828689962626,-0.014389066956937313,-0.0009043643367476761,-0.0004929837305098772,-0.03222397342324257,0.004347678739577532,0.007369517348706722,-0.0026533629279583693,-0.0013578083598986268,0.0025423152837902308,0.02474004216492176,-0.007322406396269798,0.013796813786029816,-0.024188170209527016,0.0155870346352458,0.008877071551978588,0.010034658014774323,0.011111482977867126,-0.009146277792751789,0.01123262569308281,0.019867410883307457,0.005313456058502197,-0.012935354374349117,-0.018804047256708145,0.0001256645773537457,0.008755928836762905,0.007053200155496597,0.016058145090937614,-0.0028889181558042765,-0.013971798121929169,-0.025911089032888412,-0.002978092757984996,-0.02067502960562706,0.0007293803500942886,-0.028939658775925636,0.007080120965838432,0.009879864752292633,0.010795165784657001,-0.01962512545287609,-0.032197050750255585,-0.022236425429582596,-0.0006229598075151443,-0.046599578112363815,0.020432744175195694,0.025547660887241364,0.022774837911128998,0.01490055862814188,0.001249284716323018,-0.04614192992448807,0.0029410768765956163,-0.0046202498488128185,-0.010377896018326283,-0.012181577272713184,-0.005246154498308897,-0.009038595482707024,0.012383481487631798,0.009348182938992977,0.004176059737801552,-0.009327991865575314,0.01841369830071926,0.024457376450300217,-0.014927479438483715,-0.024591978639364243,-0.02947806939482689,-0.015210146084427834,-0.015613955445587635,0.007497390266507864,0.01020291168242693,-0.007012819405645132,-0.03671971336007118,-0.02759362757205963,-0.004280377179384232,0.03179324418306351,-0.008123294450342655,0.005764375906437635,0.005397582892328501,-0.01639465242624283,-0.005798026919364929,0.0017952682683244348,-0.1750916689634323,0.00933472253382206,0.015802400186657906,-0.02300366386771202,-0.010902848094701767,0.004270282108336687,0.021967219188809395,-0.01988087221980095,-0.012349830940365791,-0.0027559977024793625,0.022196045145392418,-0.0015336336800828576,-0.013177639804780483,-0.007261835038661957,0.01363528985530138,-0.013251671567559242,0.016529256477952003,-0.0003487060603220016,0.03287006914615631,-0.002483426360413432,0.00328263221308589,-0.008580945432186127,0.032250892370939255,0.01604468561708927,0.01263249758630991,0.036046698689460754,-0.0001938073692144826,0.02299020253121853,0.0028031086549162865,-0.007059930358082056,-0.01693306490778923,-0.0059629157185554504,-0.004078472964465618,0.01666385866701603,0.00864824652671814,0.0034121875651180744,-0.0050139641389250755,0.011145133525133133,-0.00960392877459526,0.0069993590004742146,0.006339804269373417,0.016919605433940887,0.013810274191200733,0.001382205169647932,-0.010027928277850151,0.027808992192149162,0.009731801226735115,-0.005750915966928005,0.01592354290187359,0.003913584165275097,0.0157216377556324,-0.0233132503926754,0.023851662874221802,0.006911867298185825,0.009523166343569756,-0.012511354871094227,-0.0024228550028055906,0.017754143103957176,-0.01581585966050625,-0.014415987767279148,-0.01068075280636549,0.008365579880774021,-0.0008740785997360945,-0.005050980020314455,-0.025090010836720467,0.00716088293120265,-0.016435034573078156,0.009879864752292633,-0.04215767979621887,0.023219028487801552,0.0008143485174514353,0.010667292401194572,0.001379681401886046,-0.024538138881325722,0.004038091748952866,-0.01803681068122387,-0.014994780533015728,0.0276474691927433,0.03155095875263214,0.007241644896566868,-0.004017901141196489,0.01714842952787876,-0.022007601335644722,0.013231480494141579,-0.00251202960498631,0.019746268168091774,-0.0048187896609306335,0.002414442365989089,-0.03814650699496269,-0.006127804517745972,0.0058182175271213055,0.004192885477095842,-0.014685194008052349,0.00003599054616643116,-0.025197692215442657,0.0179829690605402,0.005276440177112818,0.018750205636024475,-0.0012408719630911946,-0.032358575612306595,0.013238211162388325,0.0011079513933509588,-0.020015474408864975,0.014106400310993195,0.008177136071026325,0.0052326940931379795,0.0030840926337987185,0.012013323605060577,0.01300265546888113,-0.007396438159048557,-0.04447285085916519,-0.00389675865881145,0.006787359248846769,0.016704238951206207,-0.00021420815028250217,0.03128175064921379,0.01904633268713951,-0.03822726756334305,0.023555535823106766,0.02031160145998001,0.04964160919189453,0.008601135574281216,-0.0167177002876997,-0.000009339401913166512,-0.028132040053606033,-0.018023349344730377,-0.06428641825914383,-0.012396941892802715,0.0018003159202635288,0.016529256477952003,0.008681897073984146,0.03456606715917587,-0.0005262138438411057,0.017417635768651962,-0.051929861307144165,0.01840023882687092,-0.011333577334880829,-0.01495440024882555,-0.0037520602345466614,0.0002769878483377397,0.007672374602407217,-0.0007710231584496796,-0.03284314647316933,-0.012221957556903362,-0.0031631719321012497,0.011535482481122017,-0.018373318016529083,-0.022922901436686516,0.00891745276749134,-0.0001341824245173484,0.011077831499278545,-0.013218021020293236,-0.012006592936813831,0.016690779477357864,0.024026647210121155,0.0056701540015637875,-0.007914659567177296,-0.007692564744502306,0.013009386137127876,-0.04342294856905937,-0.008466532453894615,-0.004001075867563486,-0.0029966006986796856,-0.015062082558870316,0.0054749795235693455,-0.00983948353677988,-0.011017260141670704,0.0020139983389526606,0.005808121990412474,-0.025439977645874023,-0.006211931351572275,-0.01342665497213602,-0.005246154498308897,-0.008688627742230892,0.0115220220759511,-0.0030941879376769066,-0.033893052488565445,-0.010795165784657001,-0.013837195001542568,-0.015735097229480743,0.018131032586097717,-0.00983948353677988,0.012127735652029514,0.03814650699496269,-0.027337880805134773,-0.013520877808332443,-0.0007558803190477192,-0.009348182938992977,-0.0008282294729724526,0.012545005418360233,0.005101455841213465,-0.003563615959137678,-0.006343169137835503,-0.019557824358344078,0.001724601723253727,-0.02347477339208126,0.011198974214494228,0.0347006693482399,-0.020109698176383972,0.005495170131325722,-0.032627783715724945,0.023703599348664284,-0.03696199879050255,-0.010350975207984447,0.0233132503926754,-0.035266000777482986,-0.014577511698007584,-0.02947806939482689,0.001621966832317412,0.002638220088556409,0.0091260876506567,0.017807984724640846,-0.0029107911977916956,-0.006555168889462948,0.003341520903632045,-0.045603517442941666,-0.004976948257535696,0.04266916960477829,0.02194029837846756,-0.010828816331923008,-0.013258401304483414,-0.026678327471017838,0.004236631561070681,-0.00013880940969102085,0.009321262128651142,0.008533834479749203,-0.011017260141670704,-0.023824742063879967,-0.08130025118589401,0.022222965955734253,-0.0057172649540007114,-0.021334584802389145,-0.00027446405147202313,-0.03101254440844059,0.008930913172662258,-0.015788938850164413,0.015331288799643517,-0.005104821175336838,-0.015183225274085999,-0.009926975704729557,-0.026718707755208015,0.01593700237572193,-0.011017260141670704,-0.010633641853928566,0.02194029837846756,0.0025423152837902308,0.018104111775755882,-0.013628560118377209,0.003684758674353361,0.01840023882687092,0.018655983731150627,0.0012619036715477705,0.007133962120860815,0.02853584848344326,-0.03418917581439018,0.012861322611570358,0.003309552790597081,0.009529897011816502,0.010559610091149807,-0.03461990877985954,-0.0016329033533111215,0.010956688784062862,0.003142981557175517,-0.030689498409628868,0.005081265699118376,0.020540427416563034,-0.02405356615781784,0.013541067950427532,-0.023434393107891083,-0.0057441857643425465,0.021590331569314003,-0.008520374074578285,-0.011252815835177898,-0.00970488041639328,-0.03303159028291702,0.031147148460149765,0.02700137346982956,-0.005178852938115597,0.015613955445587635,0.0179829690605402,-0.02025775983929634,-0.02609953284263611,-0.010061578825116158,-0.00008176084520528093,0.003614092245697975,-0.009745261631906033,0.006649391259998083,-0.018238713964819908,0.01993471384048462,0.013036306016147137,0.0054278685711324215,-0.021482648327946663,0.0009422214352525771,0.0014150147326290607,-0.013251671567559242,0.0009060468291863799,0.02578994631767273,-0.011952752247452736,-0.034673746675252914,0.004536123014986515,-0.011932561174035072,0.017659921199083328,0.0015285860281437635,0.011306657455861568,-0.011481640860438347,0.003775615943595767,0.0005960391717962921,0.019382840022444725,0.007975230924785137,-0.005986471194773912,0.00256418832577765,0.009011674672365189,-0.007349327206611633,0.005612947512418032,-0.010209642350673676,-0.022128744050860405,0.0007428406388498843,0.02241140976548195,-0.010243292897939682,0.005027424544095993,-0.0014898875961080194,-0.0008866976713761687,0.005347106605768204,-0.00849345326423645,0.0031833623070269823,-0.010404816828668118,0.003923679236322641,0.043019138276576996,0.003087457735091448,0.0015302685787901282,-0.0072954860515892506,-0.023811280727386475,-0.0007180232205428183,0.014241003431379795,-0.014469829387962818,-0.014173702336847782,0.008870341815054417,0.010034658014774323,0.03335464000701904,0.002771140541881323,0.012740179896354675,0.01735033467411995,-0.013473765924572945,0.012679608538746834,0.006518153008073568,-0.015613955445587635,-0.012511354871094227,0.018817508593201637,0.025991851463913918,-0.003287679748609662,0.02969343587756157,-0.007625263184309006,0.010754784569144249,0.006043677218258381,0.029828038066625595,-0.021872997283935547,0.004808694124221802,-0.00957027729600668,0.030608735978603363,-0.015492812730371952,-0.025870708748698235,-0.0046471706591546535,-0.013944877311587334,-0.004845710005611181,-0.014617891982197762,0.02880505472421646,-0.009307801723480225,0.07618533074855804,-0.0047178370878100395,-0.008035802282392979,0.03391997143626213,0.006487867329269648,0.027782071381807327,-0.022249886766076088,0.0023185377940535545,-0.019665507599711418,-0.01977318897843361,0.0036544729955494404,0.006851295940577984,0.0014596019173040986,-0.01850792020559311,-0.023649757727980614,-0.00601339153945446,-0.00541777303442359,-0.0050610750913619995,0.022424869239330292,-0.00967796053737402,0.017484936863183975,0.010290403850376606,-0.0008623008616268635,0.012046974152326584,-0.018965572118759155,0.009011674672365189,0.002959584817290306,0.00841269176453352,0.007672374602407217,0.004808694124221802,-0.011582593433558941,-0.024443915113806725,-0.02653026394546032,-0.027916675433516502,0.0185213815420866,-0.03954637795686722,-0.021953759714961052,0.01273344922810793,0.002776188077405095,0.04606116563081741,-0.044069040566682816,0.01210081484168768,0.008735738694667816,-0.04272301122546196,0.014092940837144852,-0.006238851696252823,0.003132886253297329,-0.006740248296409845,-0.014496749266982079]
  // Use the same embedding that worked in SQL
  // const embedding: any[] = [/* PASTE THE EXACT EMBEDDING THAT WORKED IN SQL */];
  
  const searchResponse = await fetch(`/api/projects/${projectId}/rag/search`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: "Alex Hormozi",
      queryEmbedding: embedding,
      limit: 3,
      threshold: 0.1
    })
  });
  
  const results = await searchResponse.json();
  console.log("Exact API call results111:", results);
};


// Let's see what the current function is actually doing
const testCurrentFunction = async () => {
  console.log("Testing current searchRAGDocuments function...");
  
  const results = await searchRAGDocuments("Alex Hormozi");
  console.log("Current function results:", results);
  
  // Let's also check what parameters it's actually sending
  console.log("Let's trace the function call...");
};



// Let's see the raw API response to understand what's happening
const debugAPIRawResponse = async () => {
  const projectId = simulationData?.simulation?.project_id;
  
  const embeddingResponse = await fetch(`/api/projects/${projectId}/rag/query-embedding`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: "Alex Hormozi" })
  });
  
  const { embedding } = await embeddingResponse.json();
  
  const searchResponse = await fetch(`/api/projects/${projectId}/rag/search`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: "Alex Hormozi",
      queryEmbedding: embedding,
      limit: 5,
      threshold: 0.1
    })
  });
  
  console.log("Search response status:", searchResponse.status);
  console.log("Search response headers:", Object.fromEntries(searchResponse.headers.entries()));
  
  const responseText = await searchResponse.text();
  console.log("Raw response text:", responseText);
  
  try {
    const parsedResponse = JSON.parse(responseText);
    console.log("Parsed response:", parsedResponse);
    console.log("Results array:", parsedResponse.results);
    console.log("Results length:", parsedResponse.results?.length);
  } catch (e) {
    console.log("Failed to parse JSON:", e);
  }
};


// Test the frontend RAG function and see what it's actually returning
const testFrontendRAG = async () => {
  console.log("Testing frontend RAG function...");
  
  const results = await searchRAGDocuments("Alex Hormozi");
  console.log("Frontend RAG results:", results);
  console.log("Results type:", typeof results);
  console.log("Results keys:", Object.keys(results));
  console.log("Results.results:", results.results);
  console.log("Results.results length:", results.results?.length);
  
  // Check if there's an error in the results
  if (results.error) {
    console.log("Error in results:", results.error);
  }
  
  // Check the success flag
  console.log("Success flag:", results.success);
};



// Get the query embedding and log it
const getQueryEmbedding = async () => {
  const projectId = simulationData?.simulation?.project_id;
  
  const embeddingResponse = await fetch(`/api/projects/${projectId}/rag/query-embedding`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: "Alex Hormozi" })
  });
  
  const { embedding } = await embeddingResponse.json();
  console.log("Query embedding for 'Alex Hormozi':");
  console.log("Embedding array:", embedding);
  console.log("Copy this array for SQL test:", JSON.stringify(embedding));
  
  return embedding;
};


// Test embedding generation
const testEmbeddingGeneration = async () => {
  const projectId = simulationData?.simulation?.project_id;
  
  const response = await fetch(`/api/projects/${projectId}/rag/query-embedding`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: "Alex Hormozi" })
  });
  
  console.log("Embedding response status:", response.status);
  console.log("Embedding response ok:", response.ok);
  
  const result = await response.json();
  console.log("Embedding result:", result);
  console.log("Embedding dimensions:", result.embeddingDimensions);
  console.log("First 5 embedding values:", result.embedding?.slice(0, 5));
  console.log("Last 5 embedding values:", result.embedding?.slice(-5));
};

  // Debug the search API response
const debugSearchAPI = async () => {
  const projectId = simulationData?.simulation?.project_id;
  
  // Generate embedding
  const embeddingResponse = await fetch(`/api/projects/${projectId}/rag/query-embedding`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: "Alex Hormozi" })
  });
  
  const { embedding } = await embeddingResponse.json();
  console.log("Generated embedding length:", embedding.length);
  
  // Test search
  const searchResponse = await fetch(`/api/projects/${projectId}/rag/search`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      query: "Alex Hormozi",
      queryEmbedding: embedding,
      limit: 5,
      threshold: 0.1
    })
  });
  
  console.log("Search response status:", searchResponse.status);
  console.log("Search response ok:", searchResponse.ok);
  
  const responseText = await searchResponse.text();
  console.log("Raw response:", responseText);
  
  try {
    const parsedResponse = JSON.parse(responseText);
    console.log("Parsed response:", parsedResponse);
  } catch (e) {
    console.log("Failed to parse JSON:", e);
  }
};



  // RAG Search Helper Functions
  const searchRAGDocuments = async (query: string) => {
    // Get projectId from simulation data
    const projectId = simulationData?.simulation?.project_id;
    console.log('projectId111', projectId);
    
    if (!projectId) {
      console.warn('No project_id found in simulation data - RAG search skipped');
      return { results: [] };
    }
    
    try {
      console.log(`🔍 [RAG] Searching documents for query: "${query}"`);
      
      // 1. Generate query embedding
      const embeddingResponse = await fetch(`/api/projects/${projectId}/rag/query-embedding`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query })
      });
      
      if (!embeddingResponse.ok) {
        throw new Error(`Embedding generation failed: ${embeddingResponse.status}`);
      }
      
      const { embedding } = await embeddingResponse.json();
      console.log(`🧠 [RAG] Generated ${embedding.length}-dimensional embedding`);
      
      // 2. Search for similar chunks
      const searchResponse = await fetch(`/api/projects/${projectId}/rag/search`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          query,
          queryEmbedding: embedding,
          limit: 3,
          threshold: 0.001
        })
      });
      
      if (!searchResponse.ok) {
        throw new Error(`Vector search failed: ${searchResponse.status}`);
      }
      
      const searchResults = await searchResponse.json();
      console.log(`📊 [RAG] Found ${searchResults.results?.length || 0} relevant chunks`);
      console.log('searchResults111', searchResults);
      return searchResults;
    } catch (error) {
      console.error('❌ [RAG] Search failed:', error);
      return { results: [] };
    }
  };

  const buildRAGContext = (ragResults: any[]) => {
    if (!ragResults || ragResults.length === 0) {
      return '';
    }
    
    const context = ragResults.map((result, index) => 
      `[Document ${index + 1}: ${result.source.filename}]\n${result.text}\n(Relevance: ${(result.similarity * 100).toFixed(1)}%)`
    ).join('\n\n');
    
    return `\n\n--- RELEVANT DOCUMENT CONTEXT ---\n${context}\n--- END CONTEXT ---\n\n`;
  };

  // Function to extract filename from URL for display
  const getFilenameFromUrl = (url: string) => {
    try {
      const urlParts = url.split('/');
      const filename = urlParts[urlParts.length - 1];
      // Remove query parameters if any
      return filename.split('?')[0] || `Stimulus ${urlParts.length}`;
    } catch (error) {
      return `Stimulus File`;
    }
  };

  // Handle media checkbox changes (both simulation and project media)
  const handleMediaCheckboxChange = async (index: number, checked: boolean, mediaType: 'simulation' | 'project') => {
    if (mediaType === 'simulation') {
      // Update simulation stimulus checkbox states
      const newSelectedStimulus = [...selectedStimulusImages];
      newSelectedStimulus[index] = checked;
      setSelectedStimulusImages(newSelectedStimulus);

      // Update attached images
      if (checked) {
        // Add image to attached images
        const originalUrl = Array.isArray(simulationData?.simulation?.stimulus_media_url) 
          ? simulationData.simulation.stimulus_media_url[index] 
          : simulationData?.simulation?.stimulus_media_url as string;
        
        const imageName = getFilenameFromUrl(originalUrl);
        const signedUrl = await getSignedUrlForDisplay(originalUrl);
        const imageObj = { url: signedUrl, name: imageName };
        
        setAttachedImages(prev => {
          const exists = prev.some(img => img.name === imageName);
          if (!exists) {
            return [...prev, imageObj];
          }
          return prev;
        });
      } else {
        // Remove image from attached images
        const originalUrl = Array.isArray(simulationData?.simulation?.stimulus_media_url) 
          ? simulationData.simulation.stimulus_media_url[index] 
          : simulationData?.simulation?.stimulus_media_url as string;
        
        const imageName = getFilenameFromUrl(originalUrl);
        setAttachedImages(prev => prev.filter(img => img.name !== imageName));
      }
    } else {
      // Handle project media
      const newSelectedProjectMedia = [...selectedProjectMediaImages];
      newSelectedProjectMedia[index] = checked;
      setSelectedProjectMediaImages(newSelectedProjectMedia);

      if (checked) {
        const originalUrl = projectMediaUrls[index];
        const imageName = getFilenameFromUrl(originalUrl);
        const signedUrls = await getSignedUrlsForProjectMedia([originalUrl]);
        const signedUrl = signedUrls[0] || originalUrl;
        const imageObj = { url: signedUrl, name: imageName };
        
        setAttachedImages(prev => {
          const exists = prev.some(img => img.name === imageName);
          if (!exists) {
            return [...prev, imageObj];
          }
          return prev;
        });
      } else {
        const originalUrl = projectMediaUrls[index];
        const imageName = getFilenameFromUrl(originalUrl);
        setAttachedImages(prev => prev.filter(img => img.name !== imageName));
      }
    }
  };

  // Keep the old function for backward compatibility
  const handleStimulusCheckboxChange = async (index: number, checked: boolean) => {
    handleMediaCheckboxChange(index, checked, 'simulation');
  };

  // Handle RAG document checkbox changes
  const handleRagDocumentCheckboxChange = (index: number, checked: boolean) => {
    const newSelectedRagDocuments = [...selectedRagDocuments];
    newSelectedRagDocuments[index] = checked;
    setSelectedRagDocuments(newSelectedRagDocuments);
    console.log('RAG document selection changed:', index, checked, newSelectedRagDocuments);
  };

  // Load signed URLs for stimulus images
  useEffect(() => {
    const loadSignedUrls = async () => {
      if (!simulationData?.simulation?.stimulus_media_url) {
        setSignedStimulusUrls([]);
        return;
      }

      setIsLoadingSignedUrls(true);
      try {
        const urls = Array.isArray(simulationData.simulation.stimulus_media_url) 
          ? simulationData.simulation.stimulus_media_url
          : [simulationData.simulation.stimulus_media_url];

        const signedUrls = await getSignedUrlsForDisplay(urls);
        setSignedStimulusUrls(signedUrls);
        // Initialize checkbox states
        setSelectedStimulusImages(new Array(urls.length).fill(false));
      } catch (error) {
        console.error('Error loading signed URLs:', error);
        // Fallback to original URLs
        const urls = Array.isArray(simulationData.simulation.stimulus_media_url) 
          ? simulationData.simulation.stimulus_media_url
          : [simulationData.simulation.stimulus_media_url];
        setSignedStimulusUrls(urls);
        setSelectedStimulusImages(new Array(urls.length).fill(false));
      } finally {
        setIsLoadingSignedUrls(false);
      }
    };

    loadSignedUrls();
  }, [simulationData?.simulation?.stimulus_media_url]);

  // Load project media when simulation data is available
  useEffect(() => {
    const loadProjectMedia = async () => {
      if (simulationData?.simulation?.project_id) {
        setIsLoadingProjectMedia(true);
        try {
          // Fetch project media URLs
          const response = await fetch(`/api/projects/${simulationData.simulation.project_id}/media`);
          const data = await response.json();
          
          if (data.success) {
            setProjectMediaUrls(data.mediaUrls || []);
            
            // Get signed URLs for project media
            if (data.mediaUrls.length > 0) {
              const signedUrls = await getSignedUrlsForProjectMedia(data.mediaUrls);
              setSignedProjectMediaUrls(signedUrls);
              setSelectedProjectMediaImages(new Array(signedUrls.length).fill(false));
            }
          }
        } catch (error) {
          console.error('Error loading project media:', error);
        } finally {
          setIsLoadingProjectMedia(false);
        }
      }
    };

    loadProjectMedia();
  }, [simulationData?.simulation?.project_id]);

  // Load RAG documents when simulation data is available
  useEffect(() => {
    const fetchRagDocuments = async () => {
      if (simulationData?.simulation?.project_id) {
        setIsLoadingRagDocuments(true);
        try {
          // Fetch RAG documents
          const response = await fetch(`/api/projects/${simulationData.simulation.project_id}/rag/documents`);
          const data = await response.json();
          
          if (data.documents) {
            console.log('data.documents', data.documents);
            setRagDocuments(data.documents || []);
            setSelectedRagDocuments(new Array(data.documents.length).fill(false));
          }
        } catch (error) {
          console.error('Error loading RAG documents:', error);
        } finally {
          setIsLoadingRagDocuments(false);
        }
      }
    };

    fetchRagDocuments();
  }, [simulationData?.simulation?.project_id]);

  // Ref for the textarea to enable scrolling and focusing
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Function to handle discussion question selection
  const handleQuestionSelect = (question: string, questionIndex?: number) => {
    setNewMessage(question);
    
    // Mark question as asked if index is provided
    if (questionIndex !== undefined && !askedQuestionIndices.includes(questionIndex)) {
      setAskedQuestionIndices(prev => [...prev, questionIndex]);
    }
    
    // Scroll to and focus the textarea after a brief delay to ensure the text is set
    setTimeout(() => {
      if (textareaRef.current) {
        textareaRef.current.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
        textareaRef.current.focus();
      }
    }, 100);
  };

  // Function to handle "Ask next question" functionality
  const handleNextQuestion = () => {
    if (!simulation.discussion_questions) return;
    
    // Find the next unasked question
    const nextQuestionIndex = simulation.discussion_questions.findIndex((_, index) => 
      !askedQuestionIndices.includes(index)
    );
    
    if (nextQuestionIndex !== -1) {
      const nextQuestion = simulation.discussion_questions[nextQuestionIndex];
      handleQuestionSelect(nextQuestion, nextQuestionIndex);
    }
  };

  // Function to handle follow-up questions
  const handleFollowUpQuestions = async (messagesOverride?: SimulationMessage[]) => {
    console.log('amit-handleFollowUpQuestions', showFollowUpQuestions)
    if (!showFollowUpQuestions) {
      setShowFollowUpQuestions(true)
      console.log('amit-handleFollowUpQuestions-true', followUpQuestions)
      setIsLoadingFollowUpQuestions(true)
      
      // Get only the most recent message exchange (last moderator question + respondent answers)
      const getRecentMessageExchange = (messages: SimulationMessage[]) => {
        if (!messages || messages.length === 0) return [];
        
        // Find the last moderator message
        let lastModeratorIndex = -1;
        for (let i = messages.length - 1; i >= 0; i--) {
          if (messages[i].sender_type === 'moderator') {
            lastModeratorIndex = i;
            break;
          }
        }
        
        // If no moderator message found, return empty array
        if (lastModeratorIndex === -1) return [];
        
        // Return the last moderator message and all subsequent messages (respondent answers)
        return messages.slice(lastModeratorIndex);
      };
      
      // Use provided messages or fall back to state
      const messagesToUse = messagesOverride || simulationMessages || [];
      console.log('simulationMessages', messagesToUse);
      const recentMessages = getRecentMessageExchange(messagesToUse);
      
      const sample = {
        simulation: simulationData?.simulation || {} as Simulation,
        messages: recentMessages,
        personas: simulationData?.personas || [] as Persona[]
      }
      const prompt = buildFollowUpQuestionsPrompt(sample)
      console.log('prompt-followup', prompt);
      console.log('recent-messages-used', recentMessages);
      const data = await runSimulationAPI(prompt, modelInUse, 'followup');
      // console.log('data', data);
      const parsedMessages = parseSimulationResponse(data.reply);
      console.log('parsedMessages-amit', parsedMessages);
      setFollowUpQuestions(parsedMessages.questions)
      setIsLoadingFollowUpQuestions(false)
    } else {
      setShowFollowUpQuestions(false)
      setFollowUpQuestions([])
    }
  }

  useEffect(() => {
    const fetchSimulationData = async () => {
      try {
        setIsLoading(true);
        const response = await fetch(`/api/simulations/${params.id}`);
        
        if (!response.ok) {
          throw new Error(`Error: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.error) {
          throw new Error(data.error);
        }
        console.log('data111', data);
        setSimulationData(data);
        setError(null);
      } catch (err: any) {
        console.error("Failed to fetch simulation:", err);
        setError(err.message || "Failed to load simulation data");
        setSimulationData(null);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchSimulationData();
  }, [simulationId]);

  // Call fetchSimulationMessages when simulation data is loaded
  useEffect(() => {
    console.log('simulationData111', simulationData);
    if (simulationData?.simulation?.id) {
      fetchSimulationMessages(simulationData.simulation.id);
      // Set userInstruction from simulation data if available
      if (simulationData.simulation.user_instructions) {
        setUserInstruction(simulationData.simulation.user_instructions);
      }
    }
  }, [simulationData]);

  // Function to fetch simulation messages
  const fetchSimulationMessages = async (simId: string) => {
    try {
      setIsLoadingMessages(true);
      const response = await fetch(`/api/simulation-messages/${simId}`);
      
      if (!response.ok) {
        throw new Error(`Error fetching messages: ${response.status}`);
      }
      
      const data = await response.json();
      
      if (data.error) {
        console.error("API error:", data.error);
      } else if (data.messages.length === 0) { // in case of human moderator, we need to set the initial message
         // if no messages, set the initial message, later also add condition simulationData.simulation.mode === "human-mod"
        setInitialMessage();
      } else {
        // sort messages by created_at date
        data.messages.sort((a: SimulationMessage, b: SimulationMessage) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime());
        // if there are messages, check how many times moderator has spoken and then set the new message to the next question
        // const moderatorMessages = data.messages.filter((msg: SimulationMessage) => msg.sender_type === 'moderator');
        // if(moderatorMessages.length) {
        //   setNewMessage(simulationData?.simulation?.discussion_questions?.[moderatorMessages.length] || "");
        // }
      }
      
      // Store the raw messages
      setSimulationMessages(data.messages || []);
      
      // Create a map of persona IDs to names
      const personaIdToNameMap = (data.personas || []).reduce((map: Record<string, string>, persona: { id: string, name: string }) => {
        map[persona.id] = persona.name;
        return map;
      }, {});
      
      // Format messages for display
      const formatted = (data.messages || []).map((msg: SimulationMessage) => {
        let speakerName = "Unknown";
        
        if (msg.sender_type === 'moderator') {
          speakerName = 'Moderator';
        } else if (msg.sender_id && personaIdToNameMap[msg.sender_id]) {
          speakerName = personaIdToNameMap[msg.sender_id];
        }
        
        // Format timestamp (if available)
        const timestamp = msg.created_at 
          ? new Date(msg.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
          : `${msg.turn_number}`;
        
        return {
          speaker: speakerName,
          text: msg.message,
          time: timestamp,
          sender_id: msg.sender_id,
          sender_type: msg.sender_type
        };
      });
      
      setFormattedMessages(formatted);
      
      // return the raw messages for further processing
      return data.messages || []
    } catch (err: any) {
      console.error("Error fetching simulation messages:", err);
    } finally {
      setIsLoadingMessages(false);
    }
  };



  const runSimulation = async (customPrompt?: ChatCompletionMessageParam[]) => {
    console.log('runSimulationCalled', simulationData);
    
    if(simulationData?.simulation && simulationData?.personas) {
      const prompt = customPrompt 
      ? customPrompt 
      : prepareInitialPrompt(simulationData?.simulation, simulationData?.personas);
      console.log('prompt123', prompt, nameToPersonaIdMap);
      try {
        setIsSimulationRunning(true);
        const data = await runSimulationAPI(prompt, modelInUse, 'chat');
        console.log('API response:', data);
        // setAvailableCredits(data.creditInfo.remaining_credits);
        
        if (data.reply) {
          // Parse the response into messages
          const parsedMessages = parseSimulationResponse(data.reply);
          console.log('Parsed messages111:', parsedMessages);
          const extractedParticipantMessages = extractParticipantMessages(parsedMessages);
          // Save the messages to the database
          const saveResult = await saveMessagesToDatabase(extractedParticipantMessages);
          
          // // Fetch updated messages after saving
          if (saveResult && simulationData.simulation.id) {
            const updatedMessages = await fetchSimulationMessages(simulationData.simulation.id);
            // Call handleFollowUpQuestions with the fresh messages
            if (updatedMessages) {
              handleFollowUpQuestions(updatedMessages);
            }
          }
        }
      } catch (error) {
        console.error("Error running simulation:", error);
      } finally {
        setIsSimulationRunning(false);
        // Don't call handleFollowUpQuestions here - it will be called after fetchSimulationMessages
      }
    }
  }

  // Function to extract participant array from any JSON structure
  function extractParticipantMessages(parsedResponse: any) {
    // If it's already an array, return it directly
    if (Array.isArray(parsedResponse)) {
      return parsedResponse;
    }
    
    // Look for any property that contains an array of objects with name/message
    for (const [key, value] of Object.entries(parsedResponse)) {
      if (Array.isArray(value) && value.length > 0) {
        // Check if the first item has name and message properties
        const firstItem = value[0];
        if (firstItem && typeof firstItem === 'object' && 
            ('name' in firstItem || 'Name' in firstItem) && 
            ('message' in firstItem || 'Message' in firstItem)) {
          return value;
        }
      }
    }
    
    // If no valid array found, return empty array
    return [];
  }


  const sendMessage = async () => {
    // this should 1st save the message to the database
    // then fetch the messages from the database
    // then build the messages for openai
    // then send the messages to openai
    // then save the response to the database
    // then fetch the updated messages from the database
    // then update the messages state
    // then update the formatted messages state
    // debugSearchAPI();
    // debugFallbackSearch();
    // searchRAGDocuments(newMessage);
    // testEmbeddingGeneration();
    // testFrontendRAG();
    // debugAPIRawResponse();
     testCurrentFunction();
    // testExactAPICall();


    if(newMessage.length > 0) {
      return;
    }
    //1. save the moderator message to the database
    setShowFollowUpQuestions(false);
    const modMessage = {
      name: 'Moderator',
      message: newMessage
    }
    const saveResult = await saveMessagesToDatabase([modMessage]);
    if (saveResult && simulationData?.simulation?.id) {
      //2. fetch the messages from the database
      const messageFetched = await fetchSimulationMessages(simulationData.simulation.id);
      const currentAttachedImages = [...attachedImages]; // Store current images before clearing
      setNewMessage('');
      setAttachedImages([]); // Clear attached images after sending
      setSelectedStimulusImages(new Array(signedStimulusUrls.length).fill(false)); // Reset simulation checkboxes
      setSelectedProjectMediaImages(new Array(signedProjectMediaUrls.length).fill(false)); // Reset project media checkboxes
     
      if(messageFetched) {
         //3. build the messages for openai with attached images
        const sample = {
          simulation: simulationData?.simulation,
          messages: messageFetched,
          personas: simulationData?.personas || []
        }
        const prompt = buildMessagesForOpenAI(sample, simulationData.simulation.study_type, userInstruction, currentAttachedImages);
        console.log('prompt1111',prompt,simulationMessages,formattedMessages, messageFetched, prompt);
        
          //4. send the messages to openai
        runSimulation(prompt);
        // rest of the steps handled in run simulation
      }
    }
    console.log('amit-handleFollowUpQuestions111', showFollowUpQuestions)
  }

  const sendMessageTest = async () => {
    const message = `Michael Rodriguez: To identify macroeconomic trends, I usually rely on economic reports from government agencies, central banks, and reputable financial institutions. I look at indicators like GDP growth, inflation rates, employment numbers, and interest rates to understand the broader economic environment. Additionally, I pay attention to geopolitical events and global trade dynamics that could impact the sector or market I'm analyzing.;`
    const parsedMessages = testParseSimulationResponse(message);
    console.log('parsedMessages', parsedMessages);
  }

  // function to set initial message in case of human moderator
  const setInitialMessage = () => {
    const initialMessage = {
      name: 'Moderator',
      message: "Welcome, everyone! Today, we're going to discuss "  + simulationData?.simulation?.topic + ". Let's start with our first question: " + simulationData?.simulation?.discussion_questions?.[0]
    }
    setNewMessage(initialMessage.message);
  }

  // Function to parse the simulation response
  const parseSimulationResponse = (responseString: string) => {
    try {
      // Remove the initial "=" and any whitespace if it exists
      const cleanedString = responseString.trim()
      .replace(/^```json\s*/i, '') // remove leading ```json
      .replace(/^```\s*/i, '')     // or just ```
      .replace(/```$/, '')
      .replace(/^\s*=\s*/, '');
      const parsed = JSON.parse(cleanedString);
      setMessages(parsed);
      return parsed;
    } catch (error) {
      // --- Fallback single-speaker parser ---
      console.log('error in parsing', error, responseString);
      const match = responseString.trim().match(/^([^:]+):\s*([\s\S]+)$/);
      if (match) {
        const [, name, message] = match;
        const fallbackParsed = [{ name: name.trim(), message: message.trim() }];
        setMessages(fallbackParsed);
        return fallbackParsed;
      }
      
      const fallbackMatch = responseString.trim().match(/^([^:]+):\s*(.+)$/);
      console.log('error in parsing-fallbackMatch', fallbackMatch);
      if (fallbackMatch) {
        console.log('error in parsing-fallbackMatch-if', fallbackMatch);
        const [_, name, message] = fallbackMatch;
        const fallbackParsed = [{ name: name.trim(), message: message.trim() }];
        setMessages(fallbackParsed);
        return fallbackParsed;
      }

      // --- Log final error if both parsing strategies fail ---
      console.error("Error parsing simulation response:", error);
      
      // Log the error to our database
      logErrorNonBlocking(
        'simulation_parser',
        error instanceof Error ? error : String(error),
        responseString,
        { 
          simulation_id: simulationId,
          page: 'simulation_detail'
        },
        params.user_id as string || undefined
      );

      // Show error popup instead of chat message
      setErrorMessage("We are experiencing some difficulties connecting to OpenAI. Please try sending the previous message again in a moment.");
      setShowErrorPopup(true);
      
      return [];
    }
  };

  // Function to parse the simulation response
  const testParseSimulationResponse = (responseString: string) => {
    try {
      // Remove the initial "=" and any whitespace if it exists
      const cleanedString = responseString.trim()
      .replace(/^```json\s*/i, '') // remove leading ```json
      .replace(/^```\s*/i, '')     // or just ```
      .replace(/```$/, '')
      .replace(/^\s*=\s*/, '');
      const parsed = JSON.parse(cleanedString);
      setMessages(parsed);
      return parsed;
    } catch (error) {

      // Show error popup instead of chat message
      setErrorMessage("We are experiencing some difficulties connecting to OpenAI. Please try sending the previous message again in a moment.");
      setShowErrorPopup(true);
      // --- Fallback single-speaker parser ---
      const fallbackMatch = responseString.trim().match(/^([^:]+):\s*(.+)$/);
      console.log('fallbackMatch', fallbackMatch);
      if (fallbackMatch) {
        const [_, name, message] = fallbackMatch;
        const fallbackParsed = [{ name: name.trim(), message: message.trim() }];
        setMessages(fallbackParsed);
        return fallbackParsed;
      }

      // Show user-friendly error message
      setMessages([{
        name: "System",
        message: "We are experiencing some difficulties connecting to OpenAI. Please try sending the previous message again in a moment."
      }]);

      // --- Log final error if both parsing strategies fail ---
      console.error("Error parsing simulation response:", error);
      return [];
    }
  };

  // Function to save messages to the database
  const saveMessagesToDatabase = async (parsedMessages: Array<{name: string, message: string}>) => {
    if (!simulationData?.simulation?.id) {
      console.error("Simulation ID is not available");
      return;
    }

    const simulationId = simulationData.simulation.id;
    
    // Map each message to the database structure
    const messageEntries = parsedMessages.map((msg, index) => {
      const isModerator = msg.name.toLowerCase() === 'moderator';
      // Try to find persona ID using the full name first, then fallback to first name
      let senderId = null;
      console.log('msg.name',index, isModerator, msg, msg.name, nameToPersonaIdMap);
      if (!isModerator) {
        // Check full name first
        if (nameToPersonaIdMap[msg.name]) {
          senderId = nameToPersonaIdMap[msg.name];
        } else {
          // Fallback to first name
          const firstName = msg.name.split(' ')[0];
          senderId = nameToPersonaIdMap[firstName];
        }
      }
      
      return {
        simulation_id: simulationId,
        sender_type: isModerator ? 'moderator' : 'participant',
        sender_id: senderId,
        message: msg.message,
        turn_number: index + 1 + simulationMessages?.length // 1-indexed as specified
      };
    });
    
    try {
      // Call API endpoint to save messages to database
      const response = await fetch('/api/simulation-messages/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages: messageEntries }),
      });
      
      if (!response.ok) {
        throw new Error(`Error saving messages: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Messages saved successfully:', data);
      return data;
    } catch (error) {
      console.error("Error saving messages to database:", error);
      return null;
    }
  };


  // Function to save summary and themes to the database
  const saveSummaryToDatabase = async (parsedMessages: {summary: string[], themes: string[]}) => {
    if (!simulationData?.simulation?.id) {
      console.error("Simulation ID is not available");
      return;
    }

    const simulationId = simulationData.simulation.id;
    
    try {
      const response = await fetch('/api/simulation-summaries', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: {
            simulation_id: simulationId,
            summary: parsedMessages.summary,
            themes: parsedMessages.themes
          }
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Error saving messages: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('Summary and themes saved successfully:', data);
      return data;
    } catch (error) {
      console.error("Error saving summary to database:", error);
      return null;
    }
  };

  const startDiscussion = async () => {
    setIsStartingDiscussion(true);
    runSimulation();

  }

  const endDiscussion = async () => {
    setIsEndingDiscussion(true);
    try {
      // Send a final thank you message from the moderator
      const finalMessage = {
        name: 'Moderator',
        message: "Thank you all for your valuable participation and insights in today's discussion. Your feedback has been incredibly helpful. This concludes our session."
      };
      
      // Save the final message
      const saveResult = await saveMessagesToDatabase([finalMessage]);
      
      if (saveResult && simulationData?.simulation?.id) {
        // Update the simulation status to completed
        const response = await fetch(`/api/simulations/${simulationData.simulation.id}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            status: 'Completed'
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to update simulation status');
        }

        // Fetch the final messages to update the UI
        await fetchSimulationMessages(simulationData.simulation.id);
        
        // Update local simulation data
        setSimulationData(prev => prev ? {
          ...prev,
          simulation: {
            ...prev.simulation,
            status: 'Completed'
          }
        } : null);

        // Redirect to insights page
        router.push(`/simulations/${simulationData.simulation.id}/insights`);
      }

    } catch (error) {
      console.error('Error ending discussion:', error);
    } finally {
        setIsEndingDiscussion(false);
      }

    // if(simulationData?.simulation && simulationMessages) {
    //   const prompt = prepareSummaryPrompt(simulationData?.simulation, simulationMessages);
    //   console.log('prompt12345',simulationMessages,simulationData?.simulation, prompt, nameToPersonaIdMap);
    
    //   try {
    //     const data = await runSimulationAPI(prompt);
    //     console.log('API response:', data);
    //     // setAvailableCredits(data.creditInfo.remaining_credits);
        
    //     if (data.reply) {
    //       // Parse the response into messages
    //       const parsedMessages = parseSimulationResponse(data.reply);
    //       console.log('Parsed messages222:', parsedMessages);
          
    //       // Save the summary and themes to the database
    //       const saveResult = await saveSummaryToDatabase(parsedMessages);
          
    //       // Redirect to insights page after saving
    //       if (saveResult && simulationData?.simulation?.id) {
    //         router.push(`/simulations/${simulationData.simulation.id}/insights`);
    //       }
    //     }
    //   } catch (error) {
    //     console.error("Error running simulation:", error);
    //   }
    // }
  };

  const copyTranscript = () => {
    if (!formattedMessages.length) return;
    // Build the transcript string
    const transcript = formattedMessages.map(m => `${m.speaker}: ${m.text}`).join("\n");
    navigator.clipboard.writeText(transcript);
  };
  
  // useEffect(() => {
  //     fetchUserCredits();
  // }, [params.user_id]);

  // Save instruction handler (expand as needed)
  const saveInstruction = async () => {
    setShowInstructionBox(false);
    if (!simulationData?.simulation?.id) return;
    try {
      await fetch(`/api/simulations/${simulationData.simulation.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_instructions: userInstruction }),
      });
    } catch (error) {
      console.error('Failed to save user instruction:', error);
    }
    // You can add logic here to use userInstruction in your LLM prompt
  }

  if (isLoading) {
    return <div className="flex items-center justify-center h-[70vh]">Loading simulation data...</div>;
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-[70vh] space-y-4">
        <div className="text-xl font-semibold text-red-500">Error loading simulation</div>
        <div className="text-gray-500">{error}</div>
        <Button onClick={() => window.history.back()}>Go Back</Button>
      </div>
    );
  }

  if (!simulationData || !simulationData.simulation) {
    return (
      <div className="flex flex-col items-center justify-center h-[70vh] space-y-4">
        <div className="text-xl font-semibold">Simulation not found</div>
        <Button onClick={() => window.history.back()}>Go Back</Button>
      </div>
    );
  }

  const { simulation, personas } = simulationData;

  // Create a map of first names to persona IDs for easy lookup
  const nameToPersonaIdMap = personas.reduce((map, persona) => {
    // Extract first name (assuming format is "First Last")
    const firstName = persona.name.split(' ')[0];
    // Add both first name and full name as keys
    map[firstName] = persona.id;
    map[persona.name] = persona.id;
    return map;
  }, {} as Record<string, string>);
  
  // console.log('Name to Persona ID Map:', nameToPersonaIdMap);

  return (
    <div className="min-h-screen bg-background">
      {/* Error Popup */}
      {showErrorPopup && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-semibold mb-2">Connection Error</h3>
            <p className="text-gray-600 mb-4">{errorMessage}</p>
            <div className="flex justify-end">
              <Button onClick={() => setShowErrorPopup(false)}>Close</Button>
            </div>
          </div>
        </div>
      )}

      {/* Main Content */}
      <div className="container mx-auto p-4 space-y-4">
      {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center gap-2">
            <Button variant="ghost" size="icon" asChild>
              <Link href="/simulations">
          <ArrowLeft className="h-4 w-4" />
              </Link>
        </Button>
        <div>
              <h1 className="text-2xl font-bold">{simulation.topic}</h1>

          <div className="flex items-center gap-2 text-sm text-gray-500">
                <span>{new Date(simulation.created_at).toLocaleDateString()}</span>
            <span>•</span>
                <span>{simulation.mode === 'ai-both' ? 'AI ' + (simulation.study_type === 'focus-group'? 'Moderator': 'Interviewer') + ' + AI ' + (simulation.study_type === 'focus-group'? 'Participants': 'Participant') : 'Human ' + (simulation.study_type === 'focus-group'? 'Moderator': 'Interviewer') + ' + AI ' + (simulation.study_type === 'focus-group'? 'Participants': 'Participant')}</span>
            <Badge variant={simulation.status === "Completed" ? "default" : "secondary"}>{simulation.status}</Badge>
              </div>
          </div>
        </div>
      </div>

        {/* Main Grid Layout */}
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-4">
          {/* Participants Section - Full width on mobile, side column on desktop */}
          <div className="col-span-1 lg:col-span-3 space-y-4">
            {/* Participants Section */}
            <Card className="h-fit">
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="font-semibold">
                    {simulation.study_type === 'focus-group'? 'Participants': 'Participant'} {simulation.study_type === 'focus-group'?'(' + personas.length + ')': ''}
                  </h2>
                  <button
                    onClick={() => setIsParticipantsCollapsed(!isParticipantsCollapsed)}
                    className="p-1 hover:bg-gray-100 rounded transition-colors"
                    title={isParticipantsCollapsed ? "Expand participants" : "Collapse participants"}
                  >
                    {isParticipantsCollapsed ? (
                      <ChevronDown className="h-4 w-4 text-gray-500" />
                    ) : (
                      <ChevronUp className="h-4 w-4 text-gray-500" />
                    )}
                  </button>
                </div>
                
                {!isParticipantsCollapsed && (
                  <>
                    {personas.length === 0 ? (
                      <div className="text-center py-4 text-gray-500">
                        No participants added to this simulation
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {personas.map((participant) => (
                          <div key={participant.id} className="flex items-start gap-2">
                            <div 
                              className="flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full text-white text-xs font-medium"
                              style={{ backgroundColor: getPersonaColor(participant.id, personas) }}
                            >
                              {participant.name[0]}
                            </div>
                            <div>
                              <h3 className="font-medium">{participant.name}</h3>
                              <p className="text-sm text-gray-500">
                                {participant.age} • {participant.occupation}
                              </p>
                              <p className="mt-1 text-xs text-gray-600">{participant.bio}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </>
                )}
              </CardContent>
            </Card>


            {/* Discussion Questions Section */}
            <Card className="h-fit">
              <CardContent className="p-4">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="font-semibold">Discussion Questions</h2>
                  <button
                    onClick={() => setIsDiscussionQuestionsCollapsed(!isDiscussionQuestionsCollapsed)}
                    className="p-1 hover:bg-gray-100 rounded transition-colors"
                    title={isDiscussionQuestionsCollapsed ? "Expand questions" : "Collapse questions"}
                  >
                    {isDiscussionQuestionsCollapsed ? (
                      <ChevronDown className="h-4 w-4 text-gray-500" />
                    ) : (
                      <ChevronUp className="h-4 w-4 text-gray-500" />
                    )}
                  </button>
                </div>
                
                {!isDiscussionQuestionsCollapsed && (
                  <>
                    {!simulation.discussion_questions || simulation.discussion_questions.length === 0 ? (
                      <div className="text-center py-4 text-gray-500">
                        No discussion questions added to this simulation
                      </div>
                    ) : (
                      <div className="space-y-3">
                        {simulation.discussion_questions.map((question, index) => {
                          const isAsked = askedQuestionIndices.includes(index);
                          return (
                            <div 
                              key={index} 
                              className={`flex items-start gap-3 p-3 rounded-lg cursor-pointer transition-colors border ${
                                isAsked 
                                  ? 'bg-green-50 border-green-200 opacity-75' 
                                  : 'bg-gray-50 hover:bg-gray-100 border-transparent hover:border-primary/20'
                              }`}
                              onClick={() => handleQuestionSelect(question, index)}
                              title={isAsked ? "This question has been asked" : "Click to add this question to your message"}
                            >
                              <div className={`flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full text-xs font-medium ${
                                isAsked 
                                  ? 'bg-green-100 text-green-700' 
                                  : 'bg-primary/10 text-primary'
                              }`}>
                                {isAsked ? '✓' : index + 1}
                              </div>
                              <p className={`text-sm leading-relaxed ${
                                isAsked ? 'text-gray-500 line-through' : 'text-gray-700'
                              }`}>
                                {question}
                              </p>
                            </div>
                          );
                        })}
                      </div>
                    )}
                  </>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Chat Window - Full width */}
          <div className="col-span-1 lg:col-span-9">
            <Card className="h-full flex flex-col">
              <CardContent className="p-4 flex-1 overflow-auto">
              <h2 className="font-semibold mb-4 flex items-center gap-2">
                Discussion
                {/* {simulationData?.simulation?.status === 'Completed' && ( */}
                  <button
                    className="ml-2 p-1 rounded hover:bg-gray-100"
                    title="Copy transcript"
                    onClick={copyTranscript}
                  >
                    <Copy className="h-4 w-4 text-primary" />
                  </button>
                {/* )} */}
              </h2>
              <div className="space-y-6">
                  {formattedMessages.length === 0 ? (
                    <div className="text-center py-4 text-gray-500">
                      {isLoadingMessages ? "Loading discussion..." : "No messages yet. Start the simulation to begin the discussion."}
                    </div>
                  ) : (
                    <>
                      {formattedMessages.map((message, i) => {
                        const isModeratorMessage = message.speaker === "Moderator";
                        const personaColor = !isModeratorMessage && message.sender_id 
                          ? getPersonaColor(message.sender_id, personas) 
                          : '#9238FF'; // Purple color to match moderator message bubble
                        
                        return (
                          <div key={i} className={`flex gap-4 items-end ${isModeratorMessage ? "flex-row-reverse" : ""}`}>
                            <div 
                              className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full text-white font-medium"
                              style={{ backgroundColor: personaColor }}
                            >
                              {isModeratorMessage ? "M" : message.speaker[0]}
                            </div>
                            <div className={`flex-1 ${isModeratorMessage ? "text-right" : ""}`}>
                              <div className={`inline-block rounded-lg px-4 py-2 max-w-[80%] ${
                                isModeratorMessage 
                                  ? "bg-primary text-primary-foreground" 
                                  : "bg-muted"
                              }`}>
                                {!isModeratorMessage && (
                                  <div className="flex items-center justify-between mb-1">
                                    <span 
                                      className="font-semibold text-sm"
                                      style={{ color: personaColor }}
                                    >
                                      {message.speaker}
                                    </span>
                                    <span className="text-xs text-gray-500 ml-2">{message.time}</span>
                                  </div>
                                )}
                                {isModeratorMessage && (
                                  <div className="flex items-center justify-between mb-1">
                                    <span className="text-xs text-primary-foreground/70">{message.time}</span>
                                    <span className="font-semibold text-sm text-primary-foreground ml-2">
                                      {simulationData?.simulation?.study_type === 'focus-group'? 'Moderator': 'Interviewer'}
                                    </span>
                                  </div>
                                )}
                                <p className="text-sm">{message.text}</p>
                              </div>
                            </div>
                          </div>
                        );
                      })}
                      {isSimulationRunning && (
                        <div className="flex gap-4">
                          <div className="flex h-10 w-10 flex-shrink-0 items-center justify-center rounded-full bg-primary/10 text-primary">
                            AI
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-2">
                              <span className="font-medium">AI Assistant</span>
                            </div>
                            <div className="mt-1 inline-block rounded-lg px-4 py-2 bg-muted">
                              <div className="flex items-center gap-2">
                                <div className="h-2 w-2 bg-primary rounded-full animate-bounce" />
                                <div className="h-2 w-2 bg-primary rounded-full animate-bounce [animation-delay:0.2s]" />
                                <div className="h-2 w-2 bg-primary rounded-full animate-bounce [animation-delay:0.4s]" />
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </>
                  )}
                </div>
              </CardContent>
              <div className="p-2 border-t">

              { (simulationData?.simulation?.mode === "ai-both" && formattedMessages.length === 0) &&<div className="mt-2">
                  <Button 
                    onClick={startDiscussion}
                    disabled={isStartingDiscussion}
                  >
                    {isStartingDiscussion ? "Starting..." : "Start Discussion"}
                  </Button>
                </div>}

                 {/* AI Instruction Box */}
                 {formattedMessages.length > 0 && (
                //  { (simulationData?.simulation?.mode === "human-mod") && (
                  <div className="mt-2 space-y-2">
                    <button
                      type="button"
                      className="text-xs text-primary underline hover:text-primary/80 focus:outline-none"
                      onClick={() => setShowInstructionBox(v => !v)}
                    >
                      {showInstructionBox ? "Hide AI instruction box" : "Not happy with the response? Instruct AI to improve its replies."}
                    </button>
                    
                    {/* Ask Next Question Button */}
                    {simulation.discussion_questions && simulation.discussion_questions.length > 0 && (
                      <button
                        type="button"
                        className="block text-xs text-primary underline hover:text-primary/80 focus:outline-none mb-1"
                        onClick={handleNextQuestion}
                        disabled={askedQuestionIndices.length >= simulation.discussion_questions.length}
                      >
                        {askedQuestionIndices.length >= simulation.discussion_questions.length 
                          ? "All questions asked" 
                          : `Ask next question (${askedQuestionIndices.length + 1} of ${simulation.discussion_questions.length})`
                        }
                      </button>
                    )}
                    
                    <button
                      type="button"
                      className="block text-xs text-primary underline hover:text-primary/80 focus:outline-none"
                      onClick={() => handleFollowUpQuestions()}
                    >
                      {showFollowUpQuestions ? "Hide follow-up questions" : "Suggest follow-up questions"}
                    </button>
                    
                    {showInstructionBox && (
                      <div className="mt-2 flex flex-col gap-2">
                        <textarea
                          className="w-full rounded border px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-primary"
                          rows={2}
                          placeholder="E.g. Be more concise, use simpler language, ask more follow-up questions..."
                          value={userInstruction}
                          onChange={e => setUserInstruction(e.target.value)}
                        />
                        <div className="flex justify-end">
                          <Button size="sm" variant="secondary" onClick={saveInstruction}>
                            Save Instruction
                          </Button>
                        </div>
                      </div>
                    )}

                    {showFollowUpQuestions && (
                      <div className="mt-2 flex flex-col gap-2">
                        {isLoadingFollowUpQuestions ? (
                          <div className="flex items-center gap-2 py-2">
                            <div className="h-2 w-2 bg-primary rounded-full animate-bounce" />
                            <div className="h-2 w-2 bg-primary rounded-full animate-bounce [animation-delay:0.2s]" />
                            <div className="h-2 w-2 bg-primary rounded-full animate-bounce [animation-delay:0.4s]" />
                            <span className="text-xs text-gray-500 ml-2">Generating follow-up questions...</span>
                          </div>
                        ) : (
                          <div className="space-y-2">
                            <p className="text-xs text-gray-500">Click on a question to add it to your message:</p>
                            {followUpQuestions.map((questionObj, index) => (
                              <button
                                key={index}
                                type="button"
                                className="w-full text-left p-2 text-xs border border-gray-200 rounded hover:bg-gray-50 hover:border-primary transition-colors"
                                onClick={() => handleQuestionSelect(questionObj.question)}
                              >
                                {questionObj.question}
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                )}

               

                {((simulationData?.simulation?.mode === "human-mod") || (formattedMessages.length > 0)) &&
                <div className="mt-2 space-y-2">
                
                  {/* Full width multiline textbox */}
                  <textarea 
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    placeholder="Type your message..."
                    className="w-full px-3 py-2 rounded-lg border focus:outline-none focus:ring-2 focus:ring-primary resize-none"
                    rows={3}
                    disabled={simulation.status === 'Completed'}
                    ref={textareaRef}
                  />
                  
                  {/* Model selector and Send button row */}
                  {/* {availableCredits !== null && ( */}
                    <div className="flex gap-2 items-center">
                      <div className="flex-1">
                        <Select
                          value={modelInUse}
                          onValueChange={(value: string) => setModelInUse(value)}
                        >
                          <SelectTrigger className="w-full">
                            <SelectValue placeholder="Select model" />
                          </SelectTrigger>
                          <SelectContent>
                            {Object.entries(CREDIT_RATES).map(([model, rates]) => (
                              <SelectItem key={model} value={model}>
                                {model} 
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <Button 
                        onClick={sendMessage}
                        disabled={(!newMessage.trim() && attachedImages.length === 0) || simulation.status === 'Completed' || isLoadingMessages}
                      >
                        Send
                      </Button>
                    </div>
                  {/* )} */}
                  
                  {/* Simulation Stimulus Images Section */}
                  {signedStimulusUrls.length > 0 && (
                    <div className="mt-4 p-3 bg-gray-50 rounded-lg border">
                      <h4 className="text-sm font-medium mb-3 text-gray-700">Simulation Images:</h4>
                      <div className="space-y-2">
                        {signedStimulusUrls.map((url, index) => {
                          const originalUrl = Array.isArray(simulationData?.simulation?.stimulus_media_url) 
                            ? simulationData.simulation.stimulus_media_url[index] 
                            : simulationData?.simulation?.stimulus_media_url as string;
                          const imageName = getFilenameFromUrl(originalUrl);
                          
                          return (
                            <div key={index} className="flex items-center space-x-3">
                              <input
                                type="checkbox"
                                id={`stimulus-${index}`}
                                checked={selectedStimulusImages[index] || false}
                                onChange={(e) => handleMediaCheckboxChange(index, e.target.checked, 'simulation')}
                                className="w-4 h-4 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary focus:ring-2"
                              />
                              <label 
                                htmlFor={`stimulus-${index}`} 
                                className="text-sm text-primary hover:text-primary/80 underline cursor-pointer"
                                onClick={(e) => {
                                  e.preventDefault();
                                  setSelectedStimulusIndex(index);
                                }}
                              >
                                {imageName}
                              </label>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}

                  {/* Project Media Images Section */}
                  {signedProjectMediaUrls.length > 0 && (
                    <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <h4 className="text-sm font-medium mb-3 text-blue-700">Project Media:</h4>
                      <div className="space-y-2">
                        {signedProjectMediaUrls.map((url, index) => {
                          const originalUrl = projectMediaUrls[index];
                          const imageName = getFilenameFromUrl(originalUrl);
                          
                          return (
                            <div key={`project-${index}`} className="flex items-center space-x-3">
                              <input
                                type="checkbox"
                                id={`project-media-${index}`}
                                checked={selectedProjectMediaImages[index] || false}
                                onChange={(e) => handleMediaCheckboxChange(index, e.target.checked, 'project')}
                                className="w-4 h-4 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary focus:ring-2"
                              />
                              <label 
                                htmlFor={`project-media-${index}`} 
                                className="text-sm text-primary hover:text-primary/80 underline cursor-pointer"
                              >
                                {imageName}
                              </label>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  )}

                  {/* Loading state for project media */}
                  {isLoadingProjectMedia && (
                    <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                      <div className="flex items-center space-x-2">
                        <div className="h-2 w-2 bg-blue-500 rounded-full animate-bounce" />
                        <div className="h-2 w-2 bg-blue-500 rounded-full animate-bounce [animation-delay:0.2s]" />
                        <div className="h-2 w-2 bg-blue-500 rounded-full animate-bounce [animation-delay:0.4s]" />
                        <span className="text-sm text-blue-600 ml-2">Loading project media...</span>
                      </div>
                    </div>
                  )}

                  {/* RAG Documents Section */}
                  {ragDocuments.length > 0 && (
                    <div className="mt-4 p-3 bg-green-50 rounded-lg border border-green-200">
                      <h4 className="text-sm font-medium mb-3 text-green-700">RAG Documents:</h4>
                      <div className="space-y-2">
                        {ragDocuments.map((document, index) => (
                          <div key={`rag-doc-${index}`} className="flex items-center space-x-3">
                            <input
                              type="checkbox"
                              id={`rag-document-${index}`}
                              checked={selectedRagDocuments[index] || false}
                              onChange={(e) => handleRagDocumentCheckboxChange(index, e.target.checked)}
                              className="w-4 h-4 text-primary bg-gray-100 border-gray-300 rounded focus:ring-primary focus:ring-2"
                            />
                            <label 
                              htmlFor={`rag-document-${index}`} 
                              className="text-sm text-primary hover:text-primary/80 underline cursor-pointer"
                            >
                              {document.original_filename || document.filename || `Document ${index + 1}`}
                            </label>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Loading state for RAG documents */}
                  {isLoadingRagDocuments && (
                    <div className="mt-4 p-3 bg-green-50 rounded-lg border border-green-200">
                      <div className="flex items-center space-x-2">
                        <div className="h-2 w-2 bg-green-500 rounded-full animate-bounce" />
                        <div className="h-2 w-2 bg-green-500 rounded-full animate-bounce [animation-delay:0.2s]" />
                        <div className="h-2 w-2 bg-green-500 rounded-full animate-bounce [animation-delay:0.4s]" />
                        <span className="text-sm text-green-600 ml-2">Loading RAG documents...</span>
                      </div>
                    </div>
                  )}
                  
                  {/* End discussion button */}
                  {formattedMessages.length > 0 && simulation.status !== 'Completed' && (
                    <Button
                      className="w-full"
                      variant="destructive"
                      onClick={endDiscussion}
                      disabled={isEndingDiscussion}
                    >
                      {isEndingDiscussion ? "Ending..." : "End Discussion and generate insights"}
                    </Button>
                  )}
                  
                  {/* View Insights button - only show when completed */}
                  {simulation.status === 'Completed' && (
                    <Button
                      className="w-full"
                      asChild
                    >
                      <Link href={`/simulations/${simulationId}/insights`}>
                        View Insights & Analysis
                      </Link>
                    </Button>

                    
                    
                  )}
                   {simulation.status === 'Completed' && (
                    <Button
                      className="w-full"
                      onClick={async () => {
                        try {
                          const shareUrl = `${window.location.origin}/idi/${simulationId}`;
                          await navigator.clipboard.writeText(shareUrl);
                          toast({
                            title: "Link copied!",
                            description: "Share link has been copied to clipboard",
                            duration: 2000,
                          });
                        } catch (err) {
                          toast({
                            title: "Failed to copy",
                            description: "Could not copy link to clipboard",
                            variant: "destructive",
                            duration: 2000,
                          });
                        }
                      }}
                    >
                      Share with Human Respondents
                    </Button>
                  )}
                </div>}


                
              </div>
          </Card>
        </div>


        </div>
      </div>

      {/* Stimulus Modal */}
      {selectedStimulusIndex !== null && signedStimulusUrls.length > 0 && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="relative bg-white rounded-lg max-w-4xl max-h-[90vh] overflow-hidden">
            <button
              onClick={() => setSelectedStimulusIndex(null)}
              className="absolute top-4 right-4 z-10 p-2 bg-black bg-opacity-20 hover:bg-opacity-30 rounded-full text-white transition-colors"
              title="Close"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            <div className="p-4">
              <h3 className="text-lg font-semibold mb-4 text-center">
                {signedStimulusUrls[selectedStimulusIndex] && getFilenameFromUrl(
                  Array.isArray(simulation.stimulus_media_url) 
                    ? simulation.stimulus_media_url[selectedStimulusIndex]
                    : simulation.stimulus_media_url as string
                )}
              </h3>
              
              <div className="flex justify-center">
                {signedStimulusUrls[selectedStimulusIndex] && (
                  <MediaViewer 
                    url={signedStimulusUrls[selectedStimulusIndex]} 
                    className="max-w-full max-h-[70vh] object-contain"
                  />
                )}
              </div>
              
              {/* Navigation buttons for multiple stimuli */}
              {/* {(() => {
                const mediaUrls = simulation.stimulus_media_url;
                return Array.isArray(mediaUrls) && mediaUrls.length > 1 && (
                  <div className="flex justify-center gap-4 mt-4">
                    <button
                      onClick={() => setSelectedStimulusIndex(
                        selectedStimulusIndex > 0 ? selectedStimulusIndex - 1 : mediaUrls.length - 1
                      )}
                      className="px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                      Previous
                    </button>
                    <span className="flex items-center px-4 py-2 text-sm text-gray-600">
                      {selectedStimulusIndex + 1} of {mediaUrls.length}
                    </span>
                    <button
                      onClick={() => setSelectedStimulusIndex(
                        selectedStimulusIndex < mediaUrls.length - 1 ? selectedStimulusIndex + 1 : 0
                      )}
                      className="px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
                    >
                      Next
                    </button>
                  </div>
                );
              })()} */}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}


